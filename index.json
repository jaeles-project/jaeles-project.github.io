[
{
	"uri": "/signatures/request-properties/",
	"title": "Request Properties",
	"tags": [],
	"description": "",
	"content": " Some core properties for draft a request.\nProperties for building a request    Property Description Default Value     method Request Method This field is required in single or list signature   url URL for sending request This field is required in single or list signature   headers Headers of the request default is blank   body Body of the request default is blank   engine Client to send a request default is blank. Use engine: chrome for sending with real browser   timeout HTTP Timeout for request (this will override --timeout option) value of --timeout option   repeat Repeat the request repeat: 0   values Another place to put variables but will replace with [[.variable_name]] format. default is blank    Some Examples in real signatures Elastic Search Misconfigure # info to search signature id: elasctic-misconfigure-01 info: name: Elasctic Search Misconfiguration risk: Medium requests: - method: GET url: {{.BaseURL}} headers: - User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55 detections: - StatusCode() == 200 \u0026amp;\u0026amp; StringSearch(\u0026quot;response\u0026quot;, '\u0026quot;cluster_name\u0026quot;') \u0026amp;\u0026amp; StringSearch(\u0026quot;response\u0026quot;, \u0026quot;Content-Type: application/json\u0026quot;) - method: GET url: {{.BaseURL}}/_search headers: - User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55 detections: - StatusCode() == 200 \u0026amp;\u0026amp; StringSearch(\u0026quot;response\u0026quot;, 'took') \u0026amp;\u0026amp; StringSearch(\u0026quot;response\u0026quot;, \u0026quot;Content-Type: application/json\u0026quot;)  With real browser # info to search signature id: dom-xss-01 info: name: DOM XSS test risk: High # tested on https://brutelogic.com.br/tests/sinks.html?name=hello variables: - xss: | sam %3Cimg+src+onerror=alert(1)%3E requests: - method: GET engine: chrome timeout: 10 url: {{.BaseURL}}/tests/sinks.html?name={{.xss}} detections: - StatusCode() == 200 \u0026amp;\u0026amp; HasPopUp()  "
},
{
	"uri": "/signatures/variables/",
	"title": "Variables",
	"tags": [],
	"description": "",
	"content": " This part will be executed first to generate for your signature list of input.\nDefault variables generated from input    Default variable E.g: http://example.com:8080/a/b/c.php?q=123     {{.URL}} http://example.com:8080/a/b/c?q=123   {{.BaseURL}} http://example.com:8080   {{.Host}} example.com:8080   {{.Domain}} example.com   {{.Port}} 8080   {{.Path}} /a/b/c   {{.Extension}} .php   {{.Raw}} http://example.com/a/b/c.php?q=123   {{.bar}} take from --params 'bar=111'   {{.Resources}} Resources path ~/.jaeles/resources   {{.ThirdParty}} Third party path ~/.jaeles/thirdparty    List of avaliable Variables function    API Variables Description Example     Base64EncodeByLines Like Base64Encode but split input as a new line first Base64EncodeByLines(\u0026quot;samp\\ndummy\u0026quot;)   Base64Encode return base64 encoded string Base64Encode(\u0026quot;a\u0026quot;) will return string like this: YQo=   File return string as content of file and split it by new line File(\u0026quot;/tmp/sensitvie_paths.txt\u0026quot;)   InputCmd return string as output of os command InputCmd(\u0026quot;echo 123\u0026quot;)   RandomNumber return random number with length RandomNumber(4) will return string like this: 6523   RandomString return random string with length RandomString(6) will return string like this: zkdlsa   Range return random string with length Range(1,6) will return list of strings like this 1 to 5`   URLEncodeByLines Like URLEncode but split input as a new line first URLEncodeByLines(\u0026quot;samp le\\ndummy\u0026quot;)   URLEncode return url encoded string URLEncode(\u0026quot;samp le\u0026quot;) will return string like this: sample%20le    "
},
{
	"uri": "/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Jaeles is a powerful, flexible and easily extensible framework written in Go for building your own Web Application Scanner. Signatures \u0026amp; Plugins Powerful, flexible and easily extensible signatures.\nUI Access "
},
{
	"uri": "/installation/burp-integration/",
	"title": "Burp Integration",
	"tags": [],
	"description": "",
	"content": " Plugin can be found here and Video Guide here\nHow to get JWT First time you run Jaeles, it\u0026rsquo;ll setup some config and credentials at ~/.jaeles/config.yaml\nPOST /auth/login HTTP/1.1 Content-Type: application/json User-Agent: Jaeles Scanner Host: 127.0.0.1:5000 Content-Length: 54 Connection: close { \u0026quot;username\u0026quot;: \u0026quot;jaeles\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;your_password_here\u0026quot; }  Use that credentials to get your JWT.\nYou can run jaeles server without authentication with -A option but keep in mind that some signatures allow execute command on your machine. So make sure you only bind this server on 127.0.0.1.\n How to install Burp plugin Download the plugin on from this URL.\nRun Jaeles as server mode by using this command jaeles server -v. First time you run, it\u0026rsquo;s gonna create default credentials on ~/.jaeles/burp.json. (Delete ~/.jaeles/ folder and run it again if you have any issue)\nMake sure you have Jython intalled on Burp then load it. Burp -\u0026gt; Extender -\u0026gt; Add jaeles-burp.py as python extensions.\nWhen Plugin is loaded it gonna auto do login and store persistance JWT in ~/.jaeles/burp.json.\nGet input from Burp\nSending request to Jaeles Server without burp You can also send request directly to Jaeles Server without burp plugins. Just follow this request body below\nPOST /api/parse HTTP/1.1 Host: 127.0.0.1:5000 User-Agent: Jaeles Scanner Authora: Jaeles \u0026lt;Your_JWT_here\u0026gt; Content-Type: application/json Connection: close { \u0026quot;url\u0026quot;: \u0026quot;http://target.com/api/foo\u0026quot;, \u0026quot;req\u0026quot;: \u0026quot;\u0026lt;base64_request\u0026gt;\u0026quot;, \u0026quot;res\u0026quot;: \u0026quot;\u0026lt;base64_response\u0026gt;\u0026quot; }  "
},
{
	"uri": "/architecture/",
	"title": "Architecture",
	"tags": [],
	"description": "",
	"content": " Overview flow Take list of Urls or raw request and combine with signature to generate request. Sending those requests and run detections script to determine request is vulnerable or not\nRequest builder Flow  Get more input from variables. [Only available in Fuzz Signature]  Run Generators and Encoding part.  Run Middleware part. Run Conclusion part. Run Detection part.  "
},
{
	"uri": "/signatures/detection/",
	"title": "Detection",
	"tags": [],
	"description": "",
	"content": " This part will be executed right after Jaeles got response from the request and do a logic for determine the request is vulnerable or not.\nDetections was written in Javascript so you can write whatever you want with some predefind function below as long as you return boolean value to determine it\u0026rsquo;s found something or not.\nExamples Detection # Response Status code equal 200 and the response body contain a string 'google.com' or 'example.com' StatusCode() == 200 \u0026amp;\u0026amp; (StringSearch(\u0026quot;response\u0026quot;, \u0026quot;google.com\u0026quot;) || StringSearch(\u0026quot;response\u0026quot;, \u0026quot;example.com\u0026quot;)) # Content Length of the response have to greater than original request ContentLength() - OriginContentLength() \u0026gt; 5000 # Response time of the request greater or smaller than original response time Math.abs(ResponseTime() - OriginResponseTime()) \u0026gt; 3 # Get value of previous request ContentLength() - parseInt(ValueOf(\u0026quot;404html\u0026quot;)) \u0026gt; 1000 OriginResponseTime() - parseFloat(ValueOf(\u0026quot;resTime\u0026quot;)) \u0026gt; 5  Normal Detection    API Detection Description Example     StringSearch Search string in component StringSearch(\u0026quot;response\u0026quot;, \u0026quot;something\u0026quot;)   StringCount Return number of string in component StringCount(\u0026quot;response\u0026quot;, \u0026quot;something\u0026quot;)   RegexSearch Search regex in component RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;.*something$\u0026quot;)   RegexCount Return number of string match the regex in component RegexCount(\u0026quot;response\u0026quot;, \u0026quot;.*something$\u0026quot;)   StatusCode Status code of the response StatusCode() == 200, StatusCode() \u0026gt; 400   ResponseTime Response time of the response (second) ResponseTime() \u0026gt; 3   ContentLength Content Length of response ContentLength() \u0026gt; 5000, StatusCode() \u0026gt; 400   OriginStatusCode Status code of the Original response OriginStatusCode() != StatusCode()   OriginResponseTime Response time of the Original response (second) ResponseTime() \u0026gt; OriginResponseTime()   OriginContentLength Content Length of Original response ContentLength() - OriginContentLength() \u0026gt; 5000   ValueOf Value of variables ValueOf(\u0026quot;foo\u0026quot;) == \u0026quot;bar\u0026quot;   HasPopUp Check if is there any pop-up box while requesting to a URL (only available when using engine: chrome) StatusCode() == 200 \u0026amp;\u0026amp; HasPopUp()   Exist Check if is file or folder exist Exist('/tmp/folder/newfile')   StringGrepCmd Search string in custom command output StringGrepCmd('bash command', 'string_to_grep')   RegexGrepCmd Search regex in custom command output RegexGrepCmd('bash command', 'regex_to_grep')    Selector for search    API Detection Description Example     request raw request StringSearch(\u0026quot;request\u0026quot;, \u0026quot;something\u0026quot;)   response raw response of the request StringSearch(\u0026quot;oResponse\u0026quot;, \u0026quot;something\u0026quot;)   resHeaders raw headers of the response StringSearch(\u0026quot;resHeaders\u0026quot;, \u0026quot;something\u0026quot;)   resBody raw body of the response StringSearch(\u0026quot;resBody\u0026quot;, \u0026quot;something\u0026quot;)   oRequest raw original request StringSearch(\u0026quot;oRequest\u0026quot;, \u0026quot;something\u0026quot;)   oResponse raw original request response of the request StringSearch(\u0026quot;response\u0026quot;, \u0026quot;something\u0026quot;)   middleware output of the middleware StringSearch(\u0026quot;middleware\u0026quot;, \u0026quot;Success!\u0026quot;)    Special Detection    API Detection Description Example     Collab Grepping collaborator response in Reuqest response or Do Real Polling with BurpCollab secret. Collab(\u0026quot;{{.oob}}\u0026quot;)    "
},
{
	"uri": "/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " Jaeles installation Download precompiled version here.\nIf you have a Go environment, make sure you have Go \u0026gt;= 1.13 with Go Modules enable and run the following command.\nGO111MODULE=on go get github.com/jaeles-project/jaeles  Inittialize Signature and Web UI This gonna pull latest signature and UI build from default repo.\njaeles config init  Load new signature to Database Just save new signature to anywhere then load it by the command below.\njaeles config add --signDir /tmp/your-custom-signatures/  with /tmp/custom-signatures/ is your custom signature folder.\nOr you can just use new signature directly by using this command\njaeles scan -s new_sign.yaml -u example.com  If you got my standard signatures structure jaeles config reload --signDir /tmp/standard-signatures/  standard signatures structure look like this.\n. ├── README.md ├── discovery ├── exper ├── fuzz ├── lite-fuzz ├── mics ├── passives ├── products ├── resources ├── sensitive └── thirdparty  "
},
{
	"uri": "/signatures/generator/",
	"title": "Generator",
	"tags": [],
	"description": "",
	"content": " This part will be executed before parsing request input with the signature for generate variation request base on the original request. Generator only available in type: fuzz signature.\nGenerator    API Generator Description Example     Method Gen request based on method Method(\u0026quot;PUT\u0026quot;) , Method()   Query Gen request based on Query String Query(\u0026quot;[[.original]]{{.payload}}\u0026quot;), Query(\u0026quot;[[.original]]{{.payload}}\u0026quot;, \u0026quot;new\u0026quot;)   Path Gen request based on Path of URL Path(\u0026quot;{{.payload}}\u0026quot;, \u0026quot;ext\u0026quot;)   Body Gen request based on Request Body Body(\u0026quot;[[.original]]{{.payload}}\u0026quot;)   Header Gen request based on Request Header Header(\u0026quot;[[.original]]{{.payload}}\u0026quot;, \u0026quot;X-Sample\u0026quot;)   Cookie Gen request based on Cookie Header Cookie(\u0026quot;{{.payload}}\u0026quot;, \u0026quot;sample\u0026quot;), Cookie(\u0026quot;[[.original]]{{.payload}}\u0026quot;)    Using Generator id: sqli-01-01 info: name: SQL Injection Error based risk: Critical type: fuzz payloads: - '''\u0026quot;' - '`}' requests: - generators: - Query(\u0026quot;{{.payload}}\u0026quot;) detections: - StringSearch(\u0026quot;response\u0026quot;, \u0026quot;mysql_fetch_array\u0026quot;) - generators: - Query(\u0026quot;[[.original]]{{.payload}}\u0026quot;) detections: - StringSearch(\u0026quot;response\u0026quot;, \u0026quot;mysql_fetch_array\u0026quot;)  If you want to generate single request with many generator do like this - Query(\u0026quot;{{.payload}}\u0026quot;); Method(\u0026quot;PUT\u0026quot;).\n Method Method() will generate \u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;, \u0026quot;PUT\u0026quot;, \u0026quot;HEAD\u0026quot;, \u0026quot;PATCH\u0026quot; based on request input. If parameter specified Method(\u0026quot;PUT\u0026quot;) only one request with PUT method generated.\nQuery, Body and Header Query(\u0026quot;[[.original]]{{.payload}}\u0026quot;) will generate number of based on number of query string in URL of the request input.\nFor example with signature sqli-01-01 and our URL is http://example.com/?q=123. We gonna get two new requests with URL http://example.com/?q=123'\u0026quot; and http://example.com/?q=123%60}.\nIf we use Query(\u0026quot;[[.original]]{{.payload}}\u0026quot;,\u0026quot;new\u0026quot;) generator then we gonna get http://example.com/?q=123\u0026amp;new='\u0026quot;.\nHeader() and Body() have same usage of Query() generator.\nFor example. Body(\u0026quot;[[.original]]{{.payload}}\u0026quot;) generate number of based on number of request body parameter of the request input.\nHeader(\u0026quot;[[.original]] \\ {{.payload}}\u0026quot;, \u0026quot;X-Command\u0026quot;) will generate a new request with X-Command header with our payload.\nPath First of all, Jaeles split path of URL like this\nURL: http://example.com/rest/products/6/reviews.php?q=123 Path: =\u0026gt; /rest/products/6/reviews 0 1 2 3 -1  and have some special parameter last, 0/1/2 and *.\nFor example our URL is http://example.com/a/b/reviews.php?q=123.\n   Path Generator Desc E.g our payload is .json.     Path(\u0026quot;{{.payload}}\u0026quot;, \u0026quot;last\u0026quot;) Last position of the Path http://example.com/a/b/.json?q=123   Path(\u0026quot;[[.original]]{{.payload}}\u0026quot;, \u0026quot;last\u0026quot;) Last position of the Path http://example.com/a/b/reviews.php.json?q=123   Path(\u0026quot;{{.payload}}\u0026quot;, \u0026quot;*\u0026quot;) Loop for all positions http://example.com/a.json/b/reviews?q=123 http://example.com/a/b.json/reviews?q=123 http://example.com/a/b/reviews.json?q=123    If you don\u0026rsquo;t specified position parameter like this Path(\u0026quot;{{.payload}}\u0026quot;), by default it\u0026rsquo;s equal to Path(\u0026quot;{{.payload}}\u0026quot;, \u0026quot;last\u0026quot;).\n"
},
{
	"uri": "/usage/",
	"title": "Usage",
	"tags": [],
	"description": "",
	"content": " Examples Command ,+izzir, '*K@@Q8\u0026amp;Q@@8t' !Q@N;'',~~;\\D@@t' ,Q@q. '~~~~~~;5@@L L@@+ '~~~~~~~^Q@X ^@@z '~~~~~~~|Q@y 'Z@@7 '~~~~;TQ@N, ^%@QhJ7fmDQ@Q7' ~}DQ@@@Qqv, ~jdQ@@Qdjr' ,U@@qv=|tm#@QY *@@= D@\u0026amp;; ,~~~;f@@^ \u0026lt;@@+ .@@L '~~~~~~K@P ,\u0026lt;zb@@K7\u0026lt;~' 'Q@f '_~~~~!N@j !XQ@QA5jEbWQ@@Ri.'*Q@@D+'',;=jQ@#. _d@@a! ';^rr=7kQ@QQ@RzoQ@@Q#Q@@Nz. ;Q@D_ '~^^r^^rr^|K@@K ';*\\vi=_' '8@%' ~^^r^r^^^r^=A@@' ,\u0026lt;}kKKhI=' =@@* ^qfr^rrrrj8U\u0026lt;^iQ@* !b@@NXaURQ@@U; ''~+P@@L z@Qv^^^rrz6y=r7@@= 'y@@a~ ',~~;LD@@7 '^^' \\Q@@@Q@@W' 'y@@RXXDdT^^r=b@@' T@@i ',~~~~~;E@@= ,D%~ '\u0026lt;^~''~Q@%~ =ENQQNKi^rLD@@7 X@#' '~~~~~~~\u0026lt;Q@o ,6@@X+' ,!+^+\u0026lt;J6Q@\u0026amp;+ n@@^ ,~~~~~~f@@i '7R@@QgDWQQ@@@Q\u0026lt; 'b@Qi' ',~~~^S@@m' '^iYjjxi^=Q@%, '7Q@QEzLYmDQ@BL' :8@#~ '+yb#QQNKf^' ,R@Q; ''' 'b@@#Q@@QDj^' ,X@@K?!=|7mQ@Q}' ,N@W; '~~~~~;IQ@q' }@Q~ ,~~~~~~~f@@= E@Q' ~~~~~~~~7@@L +@@}' ,~~~~~~^%@Q_ ^Q@Qz,,~;^\\UQ@D_ .iD@@QQQ@@QU=' '^|iL\u0026gt;~' 🚀 Jaeles beta v0.13 by @j3ssiejjj 🚀 The Swiss Army knife for automated Web Application Testing ¯\\_(ツ)_/¯ Usage: jaeles scan|server|config [options] jaeles scan|server|config|report -h -- Show usage message Subcommands: jaeles scan -- Scan list of URLs based on selected signatures jaeles server -- Start API server jaeles config -- Configuration CLI jaeles report -- Generate HTML report based on scanned output Core Flags: -c, --concurrency int Set the concurrency level (default 20) -o, --output string Output folder name (default \u0026quot;out\u0026quot;) -s, --signs strings Signature selector (Multiple -s flags are accepted) -x, --exclude strings Exclude Signature selector (Multiple -x flags are accepted) -L, --level int Filter signatures by level (default 1) -G, --passive Turn on passive detections -p, --params strings Custom params -p='foo=bar' (Multiple -p flags are accepted) -H, --headers strings Custom headers (e.g: -H 'Referer: {{.BaseURL}}') (Multiple -H flags are accepted) Mics Flags: --proxy string proxy --timeout int HTTP timeout (default 20) --debug Debug -v, --verbose Verbose --no-db Disable Database -S, --selectorFile string Signature selector from file -J, --format-input Enable special input format (default is false) -f, --found string Run host OS command when vulnerable found -O, --summaryOutput string Summary output file (default is \u0026quot;jaeles-summary.txt\u0026quot;) --passiveOutput string Passive output folder (default is \u0026quot;passive-out\u0026quot;) --passiveSummary string Passive Summary file --sp string Selector for passive detections (default \u0026quot;*\u0026quot;) --single string Forced running in single mode --sverbose bool Store verbose info in summary file -N --no-output bool Disable store output --json bool Store output as JSON format --chunk bool Enable chunk running against big input -q, --quiet Enable Quiet Output -Q, --quietFormat string Format for quiet output (default \u0026quot;{{.VulnURL}}\u0026quot;) -R, --report string HTML report file name --title string HTML report title --html string Enable generate HTML reports after the scan done --hh string Full help message --lc Shortcut for '--proxy http://127.0.0.1:8080' --ba Shortcut for -p 'BaseURL=[[.Raw]]' or -p 'root=[[.Raw]]' Examples Commands: jaeles scan -s \u0026lt;signature\u0026gt; -u \u0026lt;url\u0026gt; jaeles scan -c 50 -s \u0026lt;signature\u0026gt; -U \u0026lt;list_urls\u0026gt; -L \u0026lt;level-of-signatures\u0026gt; jaeles scan -c 50 -s \u0026lt;signature\u0026gt; -U \u0026lt;list_urls\u0026gt; jaeles scan -c 50 -s \u0026lt;signature\u0026gt; -U \u0026lt;list_urls\u0026gt; -p 'dest=xxx.burpcollaborator.net' jaeles scan -c 50 -s \u0026lt;signature\u0026gt; -U \u0026lt;list_urls\u0026gt; -f 'noti_slack \u0026quot;{{.vulnInfo}}\u0026quot;' jaeles scan -v -c 50 -s \u0026lt;signature\u0026gt; -U list_target.txt -o /tmp/output jaeles scan -s \u0026lt;signature\u0026gt; -s \u0026lt;another-selector\u0026gt; -u http://example.com echo '{\u0026quot;BaseURL\u0026quot;:\u0026quot;https://example.com/sub/\u0026quot;}' | jaeles scan -s sign.yaml -J jaeles scan -G -s \u0026lt;signature\u0026gt; -s \u0026lt;another-selector\u0026gt; -x \u0026lt;exclude-selector\u0026gt; -u http://example.com cat list_target.txt | jaeles scan -c 100 -s \u0026lt;signature\u0026gt; Others Commands: jaeles server -s '/tmp/custom-signature/sensitive/.*' -L 2 jaeles server --host 0.0.0.0 --port 5000 -s '/tmp/custom-signature/sensitive/.*' -L 2 jaeles config reload --signDir /tmp/standard-signatures/ jaeles config add -B /tmp/custom-active-signatures/ jaeles config update --repo https://github.com/jaeles-project/jaeles-signatures jaeles report -o /tmp/scanned/out jaeles report -o /tmp/scanned/out --title 'Passive Report' jaeles report -o /tmp/scanned/out --title 'Verbose Report' --sverbose Use \u0026quot;jaeles [command] --help\u0026quot; for more information about a command.  Fuzz Start API Server Usage: jaeles server [flags] Flags: -h, --help help for server --host string IP address to bind the server (default \u0026quot;127.0.0.1\u0026quot;) -A, --no-auth Turn off authenticated on API server --port string Port (default \u0026quot;5000\u0026quot;)  Burp Integration Plugin can be found here and Video Guide here "
},
{
	"uri": "/signatures/middleware/",
	"title": "Middleware",
	"tags": [],
	"description": "",
	"content": "This part will be executed right before request send to the target for doing some extra task before sending a request to target.\n   API Detection Description Example     InvokeCmd Execute Command line and get result of it InvokeCmd(\u0026quot;phuip-fpizdam {{.URL}}\u0026quot;)   Host2IP Turn Host: domain.com header to Host: IP address Host2IP()    "
},
{
	"uri": "/showcases/",
	"title": "ShowCase",
	"tags": [],
	"description": "",
	"content": " Showcases    Apache Server Status Tableau DOM XSS CVE-2019-19719     RabbitMQ Default Credentials Jenkins XSS CVE-2020-2096    More showcase can be found here List Signature with list of Urls  Detect Jira SSRF CVE-2019-8451 \nSingle Signature with list of Urls \nDetect PHPDebug bar.  Fuzzing mode with Burp  Simple SQL Injection.\n Integration with Osmedeus Professional.\n"
},
{
	"uri": "/signatures/passive/",
	"title": "Passive Detection",
	"tags": [],
	"description": "",
	"content": " Enable passive detection via --passive or -G option.\n This part used to detection common pattern in the request and execute on every request after detection part done.\nDefault passive signatures can be found here\nFirst time you run jaeles, it will installed passive to ~/.jaeles/passives.\nAdd new passive signature as single file in ~/.jaeles/passives folder or just add new rule to exist passive signature in rules section.\nSyntax Jaeles look for passive signature in file and rules in single signatures. id and reason used for Usage of detections section is same from the detection.\nSample passive signature name: \u0026quot;secret pattern\u0026quot; desc: \u0026quot;grep for secret pattern\u0026quot; risk: \u0026quot;High\u0026quot; level: 1 rules: - id: secret-base64-01 reason: \u0026quot;Base64\u0026quot; detections: - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, '([^A-Za-z0-9+/]|^)(eyJ|YTo|Tzo|PD[89]|aHR0cHM6L|aHR0cDo|rO0)[%a-zA-Z0-9+/]+={0,2}') ### Private key - id: secret-key-01 reason: \u0026quot;Private key \u0026amp; Private key base64\u0026quot; detections: - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;-----BEGIN [ A-Za-z0-9]*PRIVATE KEY[ A-Za-z0-9]*-----\u0026quot;) - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;-----BEGIN .{3,100}-----\u0026quot;) - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;-----BEGIN PGP PRIVATE KEY BLOCK-----\u0026quot;) - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;LS0tLS1CRUdJTiBQR1AgUFJJVkFURSBLRVkgQkxPQ0stLS0tL[%a-zA-Z0-9+/]+={0,2}\u0026quot;) - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;-----BEGIN RSA PRIVATE KEY-----\u0026quot;) - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tL[%a-zA-Z0-9+/]+={0,2}\u0026quot;) - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;-----BEGIN DSA PRIVATE KEY-----\u0026quot;) - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;LS0tLS1CRUdJTiBEU0EgUFJJVkFURSBLRVktLS0tL[%a-zA-Z0-9+/]+={0,2}\u0026quot;) - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;-----BEGIN EC PRIVATE KEY-----\u0026quot;) - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0t[%a-zA-Z0-9+/]+={0,2}\u0026quot;) - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;-----BEGIN OPENSSH PRIVATE KEY-----\u0026quot;) - \u0026gt;- RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS[%a-zA-Z0-9+/]+={0,2}\u0026quot;)  Using passive check inside active (normal) signatures you can enable passive by adding passive: true at the beginning of normal signature.\nid: passive-only passive: true info: name: Passive only params: - root: '{{.Raw}}' requests: - method: 'GET' url: \u0026gt;- {{.root}} headers: - User-Agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55'  you can enable passive check with some condition like this signature.\nid: passive-on-success info: name: Passive on success HTTP params: - root: '{{.Raw}}' - me: 'GET' requests: - method: GET url: \u0026gt;- {{.root}} headers: - User-Agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55' # Only do passive check if response is 200 detections: - \u0026gt;- StatusCode() == 200 \u0026amp;\u0026amp; ContentLength(\u0026quot;body\u0026quot;) \u0026gt; 100 \u0026amp;\u0026amp; DoPassive()  Usage Enable passive check for all request\ncat urls.txt | jaeles scan -G -s \u0026lt;selector\u0026gt; ...  or rely on your active signatures like some examples above\njaeles scan -s \u0026lt;selector\u0026gt; ...  "
},
{
	"uri": "/signatures/conclusions-and-conditions/",
	"title": "Conclusions &amp; Conditions",
	"tags": [],
	"description": "",
	"content": " Sample signature used conclusions and conditions id: fuzz-01-02 single: true info: name: Fuzz Injection variables: - xss: | sam foo requests: - method: GET values: - custom: \u0026quot;z1123zzz\u0026quot; url: \u0026gt;- {{.BaseURL}}/tests/sinks.html?name=[[.custom]]{{.xss}} detections: - StringSearch(\u0026quot;response\u0026quot;, \u0026quot;mysql_fetch_array\u0026quot;) conclusions: - SetValue(\u0026quot;code\u0026quot;, StatusCode()) - SetValue(\u0026quot;rt\u0026quot;, ResponseTime()) - conditions: - ValueOf(\u0026quot;code\u0026quot;) == \u0026quot;200\u0026quot; - parseInt(ValueOf(\u0026quot;code\u0026quot;)) \u0026gt; 200 - parseFloat(ValueOf(\u0026quot;rt\u0026quot;)) \u0026gt; 1 method: GET url: \u0026gt;- {{.BaseURL}}/tests/sinks.html?name=2222222222222 detections: - StringSearch(\u0026quot;response\u0026quot;, \u0026quot;mysql_fetch_array\u0026quot;)  Conditions If present, this part will be run before continue to generate request. Just some logic to check to prevent sending too much false positive request.\nUsage of conditions section is same from the detection.\nConclusions Note that value from fonclusions is always return string. Make sure you convert it to Int or Float before compare.\n Set some extra value based on the request for later use before we run detection part.\n   Property Description Example     SetValue assign something to a variable SetValue(\u0026quot;value_name\u0026quot;, StatusCode())   StringSelect Select a string from component StringSelect(\u0026quot;component\u0026quot;, \u0026quot;res1\u0026quot;, \u0026quot;right\u0026quot;, \u0026quot;left\u0026quot;)   RegexSelect Select a string from component by regex RegexSelect(\u0026quot;component\u0026quot;, \u0026quot;var_name\u0026quot;, \u0026quot;regex\u0026quot;) or RegexSelect(\u0026quot;component\u0026quot;, \u0026quot;var_name\u0026quot;, \u0026quot;regex\u0026quot;, \u0026quot;position\u0026quot;)    Please refer to detection for some similar usage.\n"
},
{
	"uri": "/donation/",
	"title": "Donation",
	"tags": [],
	"description": "",
	"content": " If you love my tools and would like to support my work, please check out some donation methods below.\nVia Opencollective \nVia Patreon \nFor people who want to support from local country If you want your name appear on this page just put [Jaeles] inside your transaction message.\n\n\n"
},
{
	"uri": "/signatures/examples/",
	"title": "Example Signatures",
	"tags": [],
	"description": "",
	"content": " Take a look at this repo repo for more examples.\n Single signature List signature Fuzz signature  Single signature Sending request to URLs with append /_debugbar/open?max=20\u0026amp;offset=0 and look for {\u0026quot;id\u0026quot;:\u0026quot; string in the reponse if it success.\nList signature Sending request to URLs with append /{{.jira}}plugins/servlet/gadgets/makeRequest?url=https://127.0.0.1:443@{{.ssrf}} with {{.jira}} and {{.ssrf}} get from variables.\nSimulate Directory Bruteforce with content from /tmp/sensitive_paths.txt. Confirm the path exist if Secret is in the reponse or Not Found word isn\u0026rsquo;t in the repsonse and different lengoth of the request and original \u0026gt; 1000.\nFuzz signature Repeat request recive from API and change replace the query value by the payload and look for error in the response.\nRepeat exactly request recive from API and change Content-Type of it and look for change in status code and response length to confirm that Content-Type can be used in application.\n"
},
{
	"uri": "/installation/persistent-burpcollaborator/",
	"title": "Persistent Burpcollaborator",
	"tags": [],
	"description": "",
	"content": " Get Collaborator Secret token Route traffic through proxy\nBurp -\u0026gt; Project Options -\u0026gt; Connections -\u0026gt; Upstream Proxy Server -\u0026gt; then run command below\nmitmdump -q -p 8667 -s burpcollaborator-oob.py  Get burpcollaborator secret\nBurp -\u0026gt; Project Options -\u0026gt; Connections -\u0026gt; Mics -\u0026gt; -\u0026gt; Burp Collaborator Server. Check on Poll over unencrypted HTTP.\nNow open Collaborator Client and click Poll now.\nCopy as many collab as need to be and store it in a file.\nDefault log will be store in ./collaborator.json\n "
},
{
	"uri": "/signatures/",
	"title": "Understand Signatures",
	"tags": [],
	"description": "",
	"content": " Signature allow execute command on your machine. So make sure you read the signature before you run it.\n Each signature basically split in three parts and written in YAML format.    Page Description     Info Information about the signature   Variables \u0026amp; Payloads Various way to generate input for a request   Request builder Overview Define various comoponent of the request that will send   Examples Signatures Real Signature from base repository    Info Some information about the signature to index in the DB\n# ID to index a signature id: common-01-01 # Type of signature default is \u0026quot;single\u0026quot; type: list # Some info about signature info: name: PHP Debug bar # those feilds below are optional # default is \u0026quot;Info\u0026quot; risk: High tech: general os: general  Request Builder Overview  Conditions: If present, do some logical stuff to decide request will be send or not. Detection: Do some logical on based on detections script to determine request is vulnerable or not. Conclusions: Do some task with result after request was send.\n Request comoponent: Define various comoponent of the request that will be send to the target and detect if it vulnerable or not by analyze response.\n Generator: Only available in fuzz signature. Provide some functions to generate request based on the template request with payloads. Middleware: Doing some extra task before sending a request to target.   Example of request component\nYou can even use burp style as a request component\n id: sensitive-01-01 type: list # default params or will be override by options `--params 'ssrf=example.com'` params: - ssrf: example.com # Original request to compare origin: method: GET redirect: true path: \u0026gt;- {{.BaseURL}} variables: # we can put list of it in a file and load it - sensitive: /tmp/sensitive_path.txt requests: - method: GET redirect: true path: \u0026gt;- {{.BaseURL}}/{{.stats}}s detections: - \u0026gt;- StatusCode() == 200 \u0026amp;\u0026amp; StringSearch(\u0026quot;response\u0026quot;, \u0026quot;Secret\u0026quot;) - \u0026gt;- StatusCode() == 200 \u0026amp;\u0026amp; !StringSearch(\u0026quot;response\u0026quot;, \u0026quot;Not Found\u0026quot;) \u0026amp;\u0026amp; Math.abs(ContentLength() - OriginContentLength() \u0026gt; 1000)  With Origin request to use Origin Detection API [Optional] Reference This is just a reference info used to describe where the signature come out.\nreference: # author of the CVE or peopel inspired you create this signature - credit: @example - link: https://jira.atlassian.com/browse/JRASERVER-70018 # author of this signature - author: @example - affected_version: 1.2 - 2  "
},
{
	"uri": "/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Jaeles - The Swiss Army knife for automated Web Application Testing  Overview    Page Description     Introduction Overview about Jaeles   Architecture Overview about the architecture   Installation Guide to Installation   Usage Guide to basic usage   Demo Some showcases   Understand Signature Understand and Write your own Signature   Donation  Supporting me    "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]